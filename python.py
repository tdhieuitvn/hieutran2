import streamlit as st
import pandas as pd
import google.generativeai as genai
import docx
import json
import numpy_financial as npf
from io import BytesIO

# --- C·∫§U H√åNH TRANG STREAMLIT ---
st.set_page_config(
    page_title="App Th·∫©m ƒê·ªãnh D·ª± √Ån ƒê·∫ßu T∆∞",
    page_icon="üí°",
    layout="wide"
)

st.title("üí° App Th·∫©m ƒê·ªãnh Hi·ªáu Qu·∫£ D·ª± √Ån Kinh Doanh")
st.caption("T·∫£i l√™n ph∆∞∆°ng √°n kinh doanh (file .docx), AI s·∫Ω t·ª± ƒë·ªông ph√¢n t√≠ch v√† t√≠nh to√°n.")

# --- C√ÅC H√ÄM X·ª¨ L√ù ---

def read_docx_text(file):
    """ƒê·ªçc n·ªôi dung text t·ª´ file .docx."""
    try:
        doc = docx.Document(file)
        full_text = [para.text for para in doc.paragraphs]
        return "\n".join(full_text)
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file Word: {e}")
        return None

def extract_project_data_with_ai(text, api_key):
    """S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin t√†i ch√≠nh t·ª´ vƒÉn b·∫£n."""
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-pro')
        
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh. H√£y ƒë·ªçc k·ªπ vƒÉn b·∫£n ph∆∞∆°ng √°n kinh doanh sau v√† tr√≠ch xu·∫•t c√°c th√¥ng tin sau ƒë√¢y d∆∞·ªõi d·∫°ng JSON.
        Ch·ªâ tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng JSON, kh√¥ng gi·∫£i th√≠ch g√¨ th√™m.
        C√°c kh√≥a c·∫ßn tr√≠ch xu·∫•t:
        - "von_dau_tu": T·ªïng v·ªën ƒë·∫ßu t∆∞ (ch·ªâ l·∫•y s·ªë).
        - "vong_doi": V√≤ng ƒë·ªùi d·ª± √°n t√≠nh b·∫±ng nƒÉm (ch·ªâ l·∫•y s·ªë).
        - "doanh_thu_nam": Doanh thu h√†ng nƒÉm (ch·ªâ l·∫•y s·ªë).
        - "chi_phi_nam": Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (ch·ªâ l·∫•y s·ªë).
        - "wacc": Chi ph√≠ s·ª≠ d·ª•ng v·ªën b√¨nh qu√¢n (WACC) d∆∞·ªõi d·∫°ng s·ªë th·∫≠p ph√¢n (v√≠ d·ª•: 13% l√† 0.13).
        - "thue_suat": Thu·∫ø su·∫•t thu·∫ø TNDN d∆∞·ªõi d·∫°ng s·ªë th·∫≠p ph√¢n (v√≠ d·ª•: 20% l√† 0.20).

        VƒÉn b·∫£n c·∫ßn ph√¢n t√≠ch:
        ---
        {text}
        ---
        """
        response = model.generate_content(prompt)
        # Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i JSON kh·ªèi response
        cleaned_response = response.text.strip().replace("```json", "").replace("```", "")
        return json.loads(cleaned_response)

    except Exception as e:
        st.error(f"L·ªói khi g·ªçi API c·ªßa Gemini ho·∫∑c x·ª≠ l√Ω JSON: {e}")
        return None

def calculate_cash_flow(data):
    """X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn t·ª´ d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t."""
    try:
        years = int(data['vong_doi'])
        investment = float(data['von_dau_tu'])
        revenue = float(data['doanh_thu_nam'])
        cost = float(data['chi_phi_nam'])
        tax_rate = float(data['thue_suat'])

        ebt = revenue - cost
        tax = ebt * tax_rate
        pat = ebt - tax
        
        # Gi·∫£ ƒë·ªãnh ƒë∆°n gi·∫£n: D√≤ng ti·ªÅn thu·∫ßn = L·ª£i nhu·∫≠n sau thu·∫ø + Chi ph√≠ kh·∫•u hao.
        # V√¨ kh√¥ng c√≥ th√¥ng tin kh·∫•u hao, ta t·∫°m t√≠nh NCF = PAT.
        ncf_op = pat

        # T·∫°o DataFrame
        cash_flow_data = {
            "NƒÉm": range(years + 1),
            "Doanh thu": [0] + [revenue] * years,
            "Chi ph√≠": [0] + [cost] * years,
            "L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT)": [0] + [ebt] * years,
            "Thu·∫ø TNDN": [0] + [tax] * years,
            "L·ª£i nhu·∫≠n sau thu·∫ø (PAT)": [0] + [pat] * years,
            "D√≤ng ti·ªÅn thu·∫ßn (NCF)": [-investment] + [ncf_op] * years
        }
        df = pd.DataFrame(cash_flow_data)
        return df
    except Exception as e:
        st.error(f"L·ªói khi t√≠nh to√°n d√≤ng ti·ªÅn: {e}")
        return None

def calculate_financial_metrics(df, wacc):
    """T√≠nh to√°n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n."""
    try:
        ncf = df['D√≤ng ti·ªÅn thu·∫ßn (NCF)'].values
        
        # NPV
        npv = npf.npv(wacc, ncf)
        
        # IRR
        irr = npf.irr(ncf) * 100  # Chuy·ªÉn sang %
        
        # PP (Payback Period)
        cumulative_cash_flow = ncf.cumsum()
        pp_years = next((i for i, x in enumerate(cumulative_cash_flow) if x > 0), None)
        pp = pp_years - (cumulative_cash_flow[pp_years-1] / ncf[pp_years]) if pp_years is not None else "Kh√¥ng ho√†n v·ªën"

        # DPP (Discounted Payback Period)
        discounted_ncf = [val / ((1 + wacc) ** i) for i, val in enumerate(ncf)]
        cumulative_discounted_ncf = pd.Series(discounted_ncf).cumsum()
        dpp_years = next((i for i, x in enumerate(cumulative_discounted_ncf) if x > 0), None)
        dpp = dpp_years - (cumulative_discounted_ncf[dpp_years-1] / discounted_ncf[dpp_years]) if dpp_years is not None else "Kh√¥ng ho√†n v·ªën"
        
        return {"NPV": npv, "IRR": irr, "PP": pp, "DPP": dpp}
    except Exception as e:
        st.error(f"L·ªói khi t√≠nh to√°n ch·ªâ s·ªë t√†i ch√≠nh: {e}")
        return None

def get_ai_analysis(metrics_data, api_key):
    """Y√™u c·∫ßu AI ph√¢n t√≠ch c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n."""
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-pro')
        
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh d·ª± √°n ƒë·∫ßu t∆∞. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ t√†i ch√≠nh sau ƒë√¢y, h√£y ƒë∆∞a ra m·ªôt b√†i ph√¢n t√≠ch ng·∫Øn g·ªçn, chuy√™n nghi·ªáp (kho·∫£ng 3-4 ƒëo·∫°n).
        
        C√°c ch·ªâ s·ªë c·∫ßn ph√¢n t√≠ch:
        - NPV: {metrics_data['NPV']:,.0f} VNƒê
        - IRR: {metrics_data['IRR']:.2f}%
        - Th·ªùi gian ho√†n v·ªën (PP): {metrics_data['PP']:.2f} nƒÉm
        - Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u (DPP): {metrics_data['DPP']:.2f} nƒÉm

        N·ªôi dung ph√¢n t√≠ch c·∫ßn bao g·ªìm:
        1. Gi·∫£i th√≠ch √Ω nghƒ©a c·ªßa t·ª´ng ch·ªâ s·ªë trong b·ªëi c·∫£nh d·ª± √°n n√†y.
        2. ƒê√°nh gi√° m·ª©c ƒë·ªô kh·∫£ thi v√† h·∫•p d·∫´n c·ªßa d·ª± √°n d·ª±a tr√™n c√°c ch·ªâ s·ªë.
        3. ƒê∆∞a ra k·∫øt lu·∫≠n cu·ªëi c√πng: "D·ª± √°n c√≥ hi·ªáu qu·∫£ v·ªÅ m·∫∑t t√†i ch√≠nh" hay "D·ª± √°n kh√¥ng hi·ªáu qu·∫£ v·ªÅ m·∫∑t t√†i ch√≠nh".
        """
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"L·ªói khi g·ªçi API ƒë·ªÉ ph√¢n t√≠ch: {e}"

# --- GIAO DI·ªÜN ·ª®NG D·ª§NG ---
api_key = st.sidebar.text_input("Nh·∫≠p Gemini API Key c·ªßa b·∫°n", type="password")

uploaded_file = st.sidebar.file_uploader(
    "T·∫£i l√™n Ph∆∞∆°ng √°n kinh doanh (.docx)",
    type=['docx']
)

# Kh·ªüi t·∫°o session state
if 'project_data' not in st.session_state:
    st.session_state.project_data = None
if 'analysis_done' not in st.session_state:
    st.session_state.analysis_done = False

if uploaded_file is not None:
    doc_text = read_docx_text(BytesIO(uploaded_file.getvalue()))
    
    if doc_text and api_key:
        if st.button("1. Tr√≠ch xu·∫•t d·ªØ li·ªáu v·ªõi AI"):
            with st.spinner("AI ƒëang ƒë·ªçc v√† ph√¢n t√≠ch file..."):
                st.session_state.project_data = extract_project_data_with_ai(doc_text, api_key)
                st.session_state.analysis_done = False # Reset khi c√≥ d·ªØ li·ªáu m·ªõi
            
            if st.session_state.project_data:
                st.success("ƒê√£ tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")
            else:
                st.error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i file Word ho·∫∑c API Key.")

    if st.session_state.project_data:
        st.subheader("B·∫£ng t√≥m t·∫Øt th√¥ng s·ªë d·ª± √°n")
        st.json(st.session_state.project_data)
        
        # T√≠nh to√°n v√† hi·ªÉn th·ªã
        df_cash_flow = calculate_cash_flow(st.session_state.project_data)
        
        if df_cash_flow is not None:
            st.subheader("2. B·∫£ng D√≤ng Ti·ªÅn D·ª± Ki·∫øn (ƒê∆°n v·ªã: VNƒê)")
            st.dataframe(df_cash_flow.style.format("{:,.0f}"))

            metrics = calculate_financial_metrics(df_cash_flow, st.session_state.project_data['wacc'])
            
            if metrics:
                st.subheader("3. C√°c Ch·ªâ S·ªë ƒê√°nh Gi√° Hi·ªáu Qu·∫£ D·ª± √Ån")
                st.session_state.analysis_done = True
                
                col1, col2 = st.columns(2)
                col3, col4 = st.columns(2)
                
                col1.metric("NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)", f"{metrics['NPV']:,.0f} VNƒê")
                col2.metric("IRR (T·ª∑ su·∫•t ho√†n v·ªën n·ªôi b·ªô)", f"{metrics['IRR']:.2f}%")
                col3.metric("Th·ªùi gian ho√†n v·ªën (PP)", f"{metrics['PP']:.2f} nƒÉm" if isinstance(metrics['PP'], (int, float)) else "N/A")
                col4.metric("Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u (DPP)", f"{metrics['DPP']:.2f} nƒÉm" if isinstance(metrics['DPP'], (int, float)) else "N/A")

    if st.session_state.analysis_done:
        st.subheader("4. Ph√¢n T√≠ch Hi·ªáu Qu·∫£ D·ª± √Ån t·ª´ AI")
        if st.button("Y√™u c·∫ßu AI Ph√¢n T√≠ch"):
            if api_key:
                with st.spinner("AI ƒëang ph√¢n t√≠ch c√°c ch·ªâ s·ªë..."):
                    metrics = calculate_financial_metrics(df_cash_flow, st.session_state.project_data['wacc'])
                    ai_feedback = get_ai_analysis(metrics, api_key)
                    st.info(ai_feedback)
            else:
                st.error("Vui l√≤ng nh·∫≠p API Key ƒë·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch.")
else:
    st.info("Vui l√≤ng nh·∫≠p API Key v√† t·∫£i l√™n file .docx ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
